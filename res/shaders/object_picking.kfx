Shader ObjectPicking
{
    Layout
    {
        // Vertex layouts
        Vertex Main
        {
            Binding     0 32 vertex
            Attribute   float3 Position 0 0 0
            Attribute   float2 UV 0 1 12
            Attribute   float3 Normal 0 2 20
        }

        StorageBuffer ObjectPickingBuffer
        {
            uint[] Data;
        }

        UniformBuffer GlobalUniformBuffer
        {
            mat4   Projection;
            mat4   View;
            float3 LightPosition;
            float4 LightColor;
            float3 CameraPosition;
        }

        global Resource GlobalResources
        {
            UniformBuffer GlobalUniformBuffer    Stage(Fragment) Set(0) Binding(0);
            StorageBuffer ObjectPickingBuffer    Stage(Fragment) Set(3) Binding(0);
        }

        // Constant buffers/Push constants
        ConstantBuffer Main
        {
            mat4    Model           Stage(Vertex);
            float2  MousePosition   Stage(Vertex);
            uint    EntityId        Stage(Vertex);
        }
    }

    GLSL ToScreen
    {
        #version 450

        #extension GL_GOOGLE_include_directive: require
        #extension GL_EXT_nonuniform_qualifier: require

        #include "includes/kraft_shader_includes.h"
        #include "includes/common.glsl"

        #if defined VERTEX

        // Inputs
        layout (location = 0) in vec3 inPosition;
        layout (location = 1) in vec2 inUV;
        layout (location = 2) in vec3 inNormal;

        // Output from the vertex shader to the fragment shader
        layout(location = 0) out struct DataTransferObject 
        {
            vec2 UV;
            vec3 Normal;
            vec3 FragPosition;
        } outDTO;

        void main()
        {
            outDTO.UV = inUV;
            outDTO.Normal = mat3(transpose(inverse(variableState.Model))) * inNormal; // For non-uniform scale
            outDTO.FragPosition = vec3(variableState.Model * vec4(inPosition, 1.0));
            gl_Position = globalState.Projection * globalState.View * variableState.Model * vec4(inPosition, 1.0);
        }

        #endif // VERTEX

        #if defined FRAGMENT

        #define DEPTH_ARRAY_SCALE 64
        layout(set = 3, binding = 0) buffer GlobalObjectPickingStorageBuffer
        {
            uint Data[DEPTH_ARRAY_SCALE];
        } globalObjectPickingStorage;

        layout (location = 0) in struct DataTransferObject 
        {
            vec2 UV;
            vec3 Normal;
            vec3 FragPosition;
        } inDTO;

        // Outputs
        layout (location = 0) out vec4 outColor;

        void main() 
        {
            if (length(variableState.MousePosition - gl_FragCoord.xy) < 10)
            {
                outColor = vec4(1.0, 0.0, 0.0, 1.0);

                uint zIndex = uint(gl_FragCoord.z * DEPTH_ARRAY_SCALE);
                if (globalObjectPickingStorage.Data[zIndex] == 0)
                {
                    globalObjectPickingStorage.Data[zIndex] = variableState.EntityId;
                }

                return;
            }

            outColor = vec4(1.0, 1.0, 0.0, 1.0);
        }

        #endif // FRAGMENT
    }

    RenderState
    {
        State Default
        {       
            Cull            Off
            ZTest           Less
            ZWrite          On
            Blend           SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
            BlendOp         Add, Add
            PolygonMode     Fill
            LineWidth       1.0   
        }
    }

    Pass ToScreen
    {
        RenderState     Default
        VertexLayout    Main
        Resources       LocalResources
        ConstantBuffer  Main
        VertexShader    ToScreen
        FragmentShader  ToScreen
    }
}
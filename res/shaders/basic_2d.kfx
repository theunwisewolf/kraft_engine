Shader Basic2D
{
    Layout
    {
        // Vertex layouts
        Vertex Main
        {
            Binding     0 20 vertex
            Attribute   float3 Position 0 0 0
            Attribute   float2 UV 0 1 12
        }

        UniformBuffer GlobalUniformBuffer
        {
            mat4   Projection;
            mat4   View;
            float3 LightPosition;
            float4 LightColor;
            float3 CameraPosition;
        }

        // Our Material Data
        StorageBuffer MaterialData
        {
            float4  DiffuseColor;
            texID   DiffuseTexture;
        }

        // List of local Resources: Uniform buffers, samplers, etc
        local Resource LocalResources
        {
            StorageBuffer MaterialData           Stage(Fragment) Set(0) Binding(1);
        }

        global Resource GlobalResources
        {
            UniformBuffer GlobalUniformBuffer    Stage(Fragment) Set(0) Binding(0);
        }

        // Constant buffers/Push constants
        ConstantBuffer Main
        {
            mat4    Model           Stage(Vertex);
        }
    }

    GLSL ToScreen
    {
        #version 450

        #extension GL_GOOGLE_include_directive: require
        #extension GL_EXT_nonuniform_qualifier: require

        #include "includes/kraft_shader_includes.h"
        #include "includes/common.glsl"

        struct MeshMaterial
        {
            vec4  DiffuseColor;
            uint  DiffuseTexture;
        };

        layout (set = 0, binding = 2) readonly buffer GlobalMaterialData
        {
            MeshMaterial Materials[];
        };

        #if defined VERTEX

        // Inputs
        layout (location = 0) in vec3 inPosition;
        layout (location = 1) in vec2 inUV;

        // Output from the vertex shader to the fragment shader
        layout(location = 0) out struct DataTransferObject 
        {
            vec2 UV;
        } outDTO;

        void main()
        {
            outDTO.UV = inUV;
            gl_Position = globalState.Projection * globalState.View * variableState.Model * vec4(inPosition, 1.0);
        }

        #endif // VERTEX

        #if defined FRAGMENT

        layout (location = 0) in struct DataTransferObject 
        {
            vec2 UV;
        } inDTO;

        // Outputs
        layout (location = 0) out vec4 outColor;

        void main() 
        {
            MeshMaterial Material = Materials[variableState.MaterialIdx];
            outColor = Material.DiffuseColor * texture(sampler2D(Textures[nonuniformEXT(Material.DiffuseTexture)], TextureSampler), inDTO.UV);
            // outColor = Material.DiffuseColor;
        }

        #endif // FRAGMENT
    }

    RenderState
    {
        State Default
        {       
            Cull            Off
            ZTest           Less
            ZWrite          On
            Blend           SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
            BlendOp         Add, Add
            PolygonMode     Fill
            LineWidth       1.0   
        }
    }

    Pass ToScreen
    {
        RenderState     Default
        VertexLayout    Main
        Resources       LocalResources
        ConstantBuffer  Main
        VertexShader    ToScreen
        FragmentShader  ToScreen
    }
}